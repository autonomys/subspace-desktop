name: "ci tests"
on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

env:
  # Not needed in CI, should make things a bit faster
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  # Build smaller artifacts to avoid running out of space in CI
  RUSTFLAGS: -C strip=debuginfo -C opt-level=s

jobs:
  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-11
          - windows-2022

    runs-on: ${{ matrix.os }}
    steps:
      - name: git checkout
        uses: actions/checkout@v2

      # For sloth256-189 Wasm support we need `llvm-ar`, which is not available by default
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-07-22
          target: wasm32-unknown-unknown
          override: true

      - name: CUDA toolchain
        uses: Jimver/cuda-toolkit@v0.2.6
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: OpenCL (Linux x86_64)
        run: sudo apt-get install -y --no-install-recommends ocl-icd-opencl-dev
        if: runner.os == 'Linux'

        # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: install webkit2gtk (ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.0-dev libappindicator3-dev

      # Imports PFX Certificate into keystore, allows Tauri to then sign the exe without being passed the private key.
      # This normally should not be required on CI-Tests, but due to the way that tauri has its code signing configuration for windows it is required that we sign or the build will fail.
      - name: import windows certificate
        if: runner.os == 'Windows'
        env:
          WINDOWS_PFX: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.CERTIFICATE_WINDOWS_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_PFX
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item â€“path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_PFX_PASSWORD -Force -AsPlainText)

      - name: install app dependencies and build it (macos)
        # sometimes it fails downloading packages, so set a timeout https://github.com/yarnpkg/yarn/issues/4890
        run: yarn install --network-timeout 1000000 && yarn build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        if: runner.os == 'macOS'

      - name: install app dependencies and build it with opencl (windos & linux)
        # sometimes it fails downloading packages, so set a timeout https://github.com/yarnpkg/yarn/issues/4890
        run: yarn install --network-timeout 1000000 && yarn build -c ./src-tauri/tauri.opencl.conf.json
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: tauri run
        uses: tauri-apps/tauri-action@v0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

  clippy-fmt:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-11
          - windows-2022

    runs-on: ${{ matrix.os }}
    steps:
      - name: git checkout
        uses: actions/checkout@v2

      # For sloth256-189 Wasm support we need `llvm-ar`, which is not available by default
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-07-22
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

      - name: CUDA toolchain
        uses: Jimver/cuda-toolkit@v0.2.6
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: OpenCL (Linux x86_64)
        run: sudo apt-get install -y --no-install-recommends ocl-icd-opencl-dev
        if: runner.os == 'Linux'

        # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: install webkit2gtk (ubuntu only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.0-dev libappindicator3-dev

      - name: install app dependencies
        # sometimes it fails downloading packages, so set a timeout https://github.com/yarnpkg/yarn/issues/4890
        run: yarn install --network-timeout 1000000
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name:
        run: yarn quasar build -m pwa

      - name: fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path src-tauri/Cargo.toml --all -- --check

      - name: clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path src-tauri/Cargo.toml -- -D warnings
