name: "publish"
on: workflow_dispatch

jobs:
  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        build:
          # for ubuntu with arch, we need more testing with cross compilation libraries
          # since releasing on arm-linux is not a priority, we skipped it for now
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            suffix: ubuntu-x86_64
            rustflags: ""
          - os: macos-12
            target: x86_64-apple-darwin
            suffix: macos-x86_64
            rustflags: ""
          - os: macos-12
            target: aarch64-apple-darwin
            suffix: macos-aarch64
            rustflags: ""
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64
            rustflags: ""

    runs-on: ${{ matrix.build.os }}

    env:
      PRODUCTION_TARGET: src-tauri/target/${{ matrix.build.target }}/release/bundle
      RUSTFLAGS: ${{ matrix.build.rustflags }}

    steps:
      - name: Maximize build space
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: git checkout
        uses: actions/checkout@v2

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.0.6

      - name: Create release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          release_name: ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: true
        if: matrix.build.target == 'macos-aarch64'

      # For sloth256-189 Wasm support we need `llvm-ar`, which is not available by default
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-07-09
          target: ${{ matrix.build.target }}
          components: rust-src
          override: true

      - name: CUDA toolchain
        uses: Jimver/cuda-toolkit@v0.2.6
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: install libdbus-1-dev and pkg-config (Linux)
        run: sudo apt -y --no-install-recommends install libdbus-1-dev pkg-config
        if: runner.os == 'Linux'

      # Workaround to resolve link error with C:\msys64\mingw64\bin\libclang.dll
      - name: Remove msys64
        run: Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse
        if: runner.os == 'Windows'

      - name: install webkit2gtk (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.0-dev libayatana-appindicator3-dev
        if: runner.os == 'Linux'

      # Imports PFX Certificate into keystore, allows Tauri to then sign the exe without being passed the private key.
      - name: import windows certificate
        if: runner.os == 'Windows'
        env:
          WINDOWS_PFX: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.CERTIFICATE_WINDOWS_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_PFX
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item –path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_PFX_PASSWORD -Force -AsPlainText)
      - name: install app dependencies
        # sometimes it fails downloading packages, so set a timeout https://github.com/yarnpkg/yarn/issues/4890
        run: yarn install --network-timeout 1000000

      - name: OpenCL (Linux x86_64)
        run: sudo apt-get install -y --no-install-recommends ocl-icd-opencl-dev
        if: runner.os == 'Linux'

      - name: Build (Ubuntu or Windows with OpenCL)
        run: yarn build -c ./src-tauri/tauri.opencl.conf.json -- --target ${{ matrix.build.target }}
        if: (runner.os == 'Linux' || runner.os == 'Windows')
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Rename OpenCL installer (Linux x86_64)
        run: |
          mv ${{ env.PRODUCTION_TARGET }}/deb/subspace-desktop_${{ steps.extract_version.outputs.version }}_amd64.deb ${{ env.PRODUCTION_TARGET }}/deb/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_amd64.deb
        if: runner.os == 'Linux'

      - name: Rename OpenCL installer (Windows)
        run: |
          move ${{ env.PRODUCTION_TARGET }}/msi/subspace-desktop_${{ steps.extract_version.outputs.version }}_x64_en-US.msi ${{ env.PRODUCTION_TARGET }}/msi/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_x64_en-US.msi
        if: runner.os == 'Windows'

      - name: Build (without OpenCL)
        run: yarn build -- --target ${{ matrix.build.target }}
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Sign Application (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Importing certificate"
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PW }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MACOS_CERTIFICATE_PW }}" build.keychain
          echo "Signing farmer"
          codesign --force --options=runtime --entitlements .github/workflows/Entitlements.plist -s "${{ secrets.MACOS_IDENTITY }}" --timestamp ${{ env.PRODUCTION_TARGET }}/dmg/subspace-desktop_0.6.10_aarch64.dmg
          echo "Creating an archive"
          mkdir ${{ env.PRODUCTION_TARGET }}/macos-installer
          cp ${{ env.PRODUCTION_TARGET }}/dmg/subspace-desktop_${{ github.ref_name }}_aarch64.dmg ${{ env.PRODUCTION_TARGET }}/macos-installer
          ditto -c -k --rsrc ${{ env.PRODUCTION_TARGET }}/macos-installer subspace-installer.zip
          echo "Notarizing"
          xcrun altool --notarize-app --primary-bundle-id binaries-${{ github.ref_name }} --username "${{ secrets.MACOS_APPLE_ID}}" --password "${{ secrets.APPLE_PASSWORD }}" --file subspace-installer.zip
          # TODO: Wait for notarization before stapling
          # echo "Stapling installer"
          # xcrun stapler staple ${{ env.PRODUCTION_TARGET }}/dmg/subspace-desktop_${{ github.ref_name }}_aarch64.dmg
          echo "Done!"
      - name: Sign Application (Windows)
        uses: skymatic/code-sign-action@v1.1.0
        with:
          certificate: ${{ secrets.WINDOWS_CERTIFICATE }}
          password: ${{ secrets.WINDOWS_CERTIFICATE_PW }}
          certificatesha1: 00A427587B911908F59B6C42BA2863109C599C1C
          folder: ${{ env.PRODUCTION_TARGET }}/msi

      - name: Prepare installers for uploading (Ubuntu)
        run: |
          mkdir executables
          mv ${{ env.PRODUCTION_TARGET }}/deb/subspace-desktop_${{ steps.extract_version.outputs.version }}_amd64.deb executables/subspace_desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.deb
          mv ${{ env.PRODUCTION_TARGET }}/deb/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_amd64.deb executables/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.deb
        if: runner.os == 'Linux'

      - name: Prepare installers for uploading (macOS intel)
        run: |
          mkdir executables
          mv ${{ env.PRODUCTION_TARGET }}/dmg/subspace-desktop_${{ steps.extract_version.outputs.version }}_x64.dmg executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg
          # Zip it so that signature is not lost
          ditto -c -k --rsrc executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.zip
          rm executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg
        if: matrix.build.target == 'x86_64-apple-darwin'

      - name: Prepare installers for uploading (macOS arm)
        run: |
          mkdir executables
          mv ${{ env.PRODUCTION_TARGET }}/dmg/subspace-desktop_${{ steps.extract_version.outputs.version }}_aarch64.dmg executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg
          # Zip it so that signature is not lost
          ditto -c -k --rsrc executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.zip
          rm executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.dmg
        if: matrix.build.target == 'aarch64-apple-darwin'

      - name: Prepare installers for uploading (Windows)
        run: |
          mkdir executables
          move ${{ env.PRODUCTION_TARGET }}/msi/subspace-desktop_${{ steps.extract_version.outputs.version }}_x64_en-US.msi executables/subspace-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.msi
          move ${{ env.PRODUCTION_TARGET }}/msi/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_x64_en-US.msi executables/subspace-desktop-opencl_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}.msi
        if: runner.os == 'Windows'

      - name: Upload installers to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: executables_${{ steps.extract_version.outputs.version }}_${{ matrix.build.suffix }}
          path: |
            executables/*
          if-no-files-found: error

      - name: Create a release and Upload installers to assets
        uses: softprops/action-gh-release@v1
        with:
          body: "See the assets to download this version and install. \n ⚠️ This version is not tested yet, please use the version with latest tag on it! ⚠️"
          prerelease: true
          draft: true
          name: ${{ steps.extract_version.outputs.version }}
          tag_name: ${{ steps.extract_version.outputs.version }}
          fail_on_unmatched_files: true
          files: executables/*
# TODO: use the monorepo approach for publishing a release
